admin:
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901
static_resources:
  listeners:
  - name: listener_s3
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: AUTO
          scheme_header_transformation:
            scheme_to_overwrite: https
          stat_prefix: ingress_http
          route_config:
            name: s3_route
            virtual_hosts:
            - name: s3_web
              domains: ['*']
              routes:
              - match:
                  prefix: '/'
                route:
                  cluster: s3
          access_log:
            - name: envoy.access_loggers.file
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                path: /dev/stdout
                log_format:
                  json_format:
                    listener: 's3'
                    start_time: '%START_TIME%'
                    method: '%REQ(:METHOD)%'
                    path: '%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%'
                    proto: '%PROTOCOL%'
                    respcode: '%RESPONSE_CODE%'
                    respflag: '%RESPONSE_FLAGS%'
                    bytesrecv: '%BYTES_RECEIVED%'
                    bytessent: '%BYTES_SENT%'
                    duration: '%DURATION%'
                    upservicetime: '%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%'
                    x-forwarded-for: '%REQ(X-FORWARDED-FOR)%'
                    user-agent: '%REQ(USER-AGENT)%'
                    x-request-id: '%REQ(X-REQUEST-ID)%'
                    authority: '%REQ(:AUTHORITY)%'
                    uphost: '%UPSTREAM_HOST%'
                    downremoteaddr: '%DOWNSTREAM_REMOTE_ADDRESS%'
          http_filters:
          - name: envoy.filters.http.aws_request_signing
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning
              service_name: s3
              region: "${AWS_REGION}"
              use_unsigned_payload: true
              host_rewrite: "${AWS_S3_ENDPOINT}"
          - name: envoy.filters.http.router
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_params:
              tls_maximum_protocol_version: TLSv1_3
              tls_minimum_protocol_version: TLSv1_2
              cipher_suites: [ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305]
            tls_certificates:
            - certificate_chain: {filename: "/etc/ssl/certs/fullchain.pem"}
              private_key: {filename: "/etc/ssl/private/privkey.pem"}
            validation_context:
              trusted_ca:
                filename: /etc/ssl/certs/myca.crt
              crl:
                filename: /etc/ssl/certs/mycacrl.pem
          require_client_certificate: true
                
  - name: listener_api
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10001
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: AUTO
          scheme_header_transformation:
            scheme_to_overwrite: https
          stat_prefix: ingress_http
          route_config:
            name: api_route
            virtual_hosts:
            - name: api_web
              domains: ['*']
              routes:
              - match:
                  prefix: '/'
                route:
                  cluster: apigw
          access_log:
            - name: envoy.access_loggers.file
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                path: /dev/stdout
                log_format:
                  json_format:
                    listener: 'apigw'
                    start_time: '%START_TIME%'
                    method: '%REQ(:METHOD)%'
                    path: '%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%'
                    proto: '%PROTOCOL%'
                    respcode: '%RESPONSE_CODE%'
                    respflag: '%RESPONSE_FLAGS%'
                    bytesrecv: '%BYTES_RECEIVED%'
                    bytessent: '%BYTES_SENT%'
                    duration: '%DURATION%'
                    upservicetime: '%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%'
                    x-forwarded-for: '%REQ(X-FORWARDED-FOR)%'
                    user-agent: '%REQ(USER-AGENT)%'
                    x-request-id: '%REQ(X-REQUEST-ID)%'
                    authority: '%REQ(:AUTHORITY)%'
                    uphost: '%UPSTREAM_HOST%'
                    downremoteaddr: '%DOWNSTREAM_REMOTE_ADDRESS%'
          http_filters:
          - name: envoy.filters.http.aws_request_signing
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning
              service_name: execute-api
              region: "${AWS_REGION}"
              use_unsigned_payload: false
              host_rewrite: "${AWS_APIGW_ENDPOINT}"
          - name: envoy.filters.http.router
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_params:
              tls_maximum_protocol_version: TLSv1_3
              tls_minimum_protocol_version: TLSv1_2
              cipher_suites: [ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305]
            tls_certificates:
            - certificate_chain: {filename: "/etc/ssl/certs/fullchain.pem"}
              private_key: {filename: "/etc/ssl/private/privkey.pem"}
            validation_context:
              trusted_ca:
                filename: /etc/ssl/certs/myca.crt
              crl:
                filename: /etc/ssl/certs/mycacrl.pem
          require_client_certificate: true

  clusters:
  - name: s3
    connect_timeout: 30s
    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: s3
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "${AWS_S3_ENDPOINT}"
                port_value: 443
    transport_socket:
      name: envoy.transport_sockets.tls

  - name: apigw
    connect_timeout: 30s
    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: apigw
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "${AWS_APIGW_ENDPOINT}"
                port_value: 443
    transport_socket:
      name: envoy.transport_sockets.tls
  